from typing import List, Dict, Tuple
import ID_Functions as IDF
import random



class ID:
    def __init__(self) -> Dict:
        # Importing person templates
        # {HOW:} This is done by calling the methods in the person class, thereby instantiazing the template they render as a dict object
        self.male_template = IDF.person().male()
        self.female_template = IDF.person().female()
        self.gen_z_template = IDF.person().gen_z()

    def __str__(self):
        gen_id_dict = self.output()
        return f"Generate_ID: {gen_id_dict}"        


    def male(self) -> dict:
        # Estableshing credentials for male user
        # {HOW:} This is done by inputting the male dict (no pun intended) into the username_password method of the IDF class, that results in username/password for the user template.
        creds = IDF.username_password(self.male_template)
        # Setting parameters to export as dict object
        obj = {
        "first_name" : self.male_template["First_Name"],
        "last_name" : self.male_template["Last_Name"],
        "gender" : self.male_template["Gender"],
        "username" : creds["Username"],
        "password" : creds["Password"],
        "day" : IDF.day(),
        "year" : IDF.year(),
        "month" : IDF.month()
        }
        # Exporting
        return obj
    

    def female(self) -> dict:
        # Estableshing credentials for female user
        # {HOW:} This is done by inputting the female dict into the username_password method of the IDF class, that results in username/password for the user template.
        creds = IDF.username_password(self.female_template)
        # Setting parameters to export as dict object
        obj = {
        "first_name" : self.female_template["First_Name"],
        "last_name" : self.female_template["Last_Name"],
        "gender" : self.female_template["Gender"],
        "username" : creds["Username"],
        "password" : creds["Password"],
        "day" : IDF.day(),
        "year" : IDF.year(),
        "month" : IDF.month()
        }
        # Exporting
        return obj


    def gen_z(self) -> dict:
        # Estableshing credentials for gen-z user :)
        # {HOW:} This is done by inputting the gen-z dict into the username_password method of the IDF class, that results in username/password for the user template.
        creds = IDF.username_password(self.gen_z_template)
        # Setting parameters to export as dict object
        obj = {
        "first_name" : self.gen_z_template["First_Name"],
        "last_name" : self.gen_z_template["Last_Name"],
        "gender" : self.gen_z_template["Gender"],
        "username" : creds["Username"],
        "password" : creds["Password"],
        "day" : IDF.day(),
        "year" : IDF.year(),
        "month" : IDF.month()
        }
        # Exporting
        return obj
    
    def random(self) -> dict:
        # Estableshing credentials for random user :)
        # {HOW:}
        template = random.choice([self.male_template, self.female_template, self.gen_z_template])
        creds = IDF.username_password(template)
        # Setting parameters to export as dict object
        obj = {
        "first_name" : template["First_Name"],
        "last_name" : template["Last_Name"],
        "gender" : template["Gender"],
        "username" : creds["Username"],
        "password" : creds["Password"],
        "day" : IDF.day(),
        "year" : IDF.year(),
        "month" : IDF.month()
        }
        # Exporting
        return obj
    





    ### Here I'm creating the final export functionalities that will interact with Argparse.
    ### For example, when users hit "python Google-ID-Generator --male 10" , then XXXXX will be called below, 
    ### and the result will be exported to stdout. (Use -o or --output, then a file path for outputting files.)

    """
    Returns list of dicts of optional ID's generated by amount chosen.
    """
    def amount(self, amount:int, option:str) -> List[dict]:
       if (option == "male"):
          male = list()
          for _ in range(amount):
            male += ID().male()
          return [self.male() for _ in range(0, amount)]
          #male_IDS = [self.male() for _ in range(0, amount)]
       elif option == "female":
          return [self.female() for _ in range(amount)]
       elif option == "random":
          types = ["male", "female", "gen_z"]
          return [getattr(self, random.choice(types))() for _ in range(amount)]




